06/06/21 - 13/06/21: Various tutorials on creating 'first apps' / introduction to UI components 
15/06/21: UI Testing on Android using Espresso, Fragments 
16/06/21: ViewModel and Fragment videos, Android Architecture Components Beginner Video. 
Started trying to write unit tests for app but many issues: 
*Using Fragment > Activity to build UI as Fragment has shorter/easier to control life cycle + works with ViewModel, which we want to be 'UI Manager' in future
*But examples given by android doc for Activity class or if for Fragment, written in Kotlin. Can't work out why FragmentScenario class won't run...
*Written a not v good large instrumental test, but wanted to write small, precise unit test --TODO
20/06/21: Android is written in Java 8 - some backwards compatibility adjustments. Put @RequiresApi annotation in ViewModel first iteration.
Implemented ViewModel, where the data for the UI will be stored so if the activity/fragment is destroyed (eg screen rotation), 
state is preserved. Used simple static list to test with emulator & real device. 
25-29/6/21: Watched YT videos about TDD in Android (Philipp Lackner). Current MainViewModel class only contains getters/setters.
Doesn't need testing atm as no formal business logic. Will move on to implementing stack for user req: provide basic way for user
to repeat same flashcards. 
29/6/21: Resolved Button issue - text appears over two lines and improved spacing.
03/07/21: Need new home screen to take user input. Will need new Activity and to use Intent. 
There is also option to use Android Navigation Library instead of Intent but for now, impl bog standard Intent.
04/7/21: NEW FUNCTION not in original spec (1-2 work units) - added back to home button. Android has built-in finish() function
which destroys activity - no need to use stack for manual undo (unless back is to preserve some state *within* the activity).
05/7/21: Implemented RecyclerView/Adapter (to an extent) but it doesn't work well for MyCards - used for endless scroll function.
Thought it could help 'refresh' cards and could come back to it if want to implement swipe > button for moving to next card. 
Conclusion for now - not appropriate!
6/7/21: TODO - figure out how to pass data input from MainActivity into shared VM.



Q&A

Q: What is the difference between FragmentManager and ViewModel?
A: FM is built-in to the Android Framework and doesn't need dev implementation. 
VM is a 'helper class' that helps manage the <i>lifecycle</i> of UI components and changes the way UI data is managed in an app.
VM encourages good architectural design (data is separated from UI code - good for modularity, simplifies testing). 

Q: Is ViewModel the same as onSaveInstanceState()? - No. 
Both address UI data BUT:
*onSaveInstanceState() is a lifecycle callback. 
**Is designed to save a small amount of transient data, not complex objs eg lists.
**Is called during confis changes and when activity goes into the bg.
*VM fundamentally changes the way UI data is managed in the app. 
**Can delegate loading complex data and also acts as temp storage once data is loaded.
**Do not need to reload or process data kept in a VM during config changes or when activiity goes into the bg.
